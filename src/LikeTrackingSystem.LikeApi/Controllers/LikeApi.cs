/*
 * Like API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using LikeTrackingSystem.LikeApi.Attributes;
using LikeTrackingSystem.LikeApi.Models;
using LikeTrackingSystem.LikeApi.Services;
using LikeTrackingSystem.Framework.Logging;
using System.Threading.Tasks;

namespace LikeTrackingSystem.LikeApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LikeApiController : ControllerBase
    {

        private readonly IArticleLikingService _articleLikingService;
        private readonly ILikeCounterService _likeCounterService;

        private readonly ILikeTrackingService _likeTrackingService;
        private readonly ILogBook _log;


        /// <summary>
        /// Creates a new instance of the <see cref="LikeApiController"/> class.
        /// </summary>
        /// <param name="articleLikingService"></param>
        /// <param name="likeCounterService"></param>
        /// <param name="likeTrackingService"></param>
        /// <param name="logBook"></param>
        public LikeApiController(IArticleLikingService articleLikingService, ILikeCounterService likeCounterService, ILikeTrackingService likeTrackingService, ILogBook? logBook = null)
        {
            _articleLikingService = articleLikingService;
            _likeCounterService = likeCounterService;
            _likeTrackingService = likeTrackingService;
            _log = logBook ?? Log.Null;
        }


        /// <summary>
        /// Gets like information for article
        /// </summary>
        /// <param name="articleId"></param>
        /// <param name="xUserId"></param>
        /// <response code="200">Information found</response>
        /// <response code="400">The parameters you provided are invalid</response>
        /// <response code="404">The resource you were trying to reach is not found</response>
        [HttpGet]
        [Route("/articles/{article_id}/likes")]
        [ValidateModelState]
        [SwaggerOperation("ArticleLikesInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(LikeInfo), description: "Information found")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "The parameters you provided are invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "The resource you were trying to reach is not found")]
        public virtual async Task<IActionResult> ArticleLikesInfo([FromRoute(Name = "article_id")][Required] Guid articleId, [FromHeader][Required()] Guid xUserId)
        {
            try
            {
                _log.WithArticle(articleId.ToString()).WithUser(xUserId.ToString()).Information("Get likes info");
                var count = await _likeCounterService.GetLikesFor(articleId.ToString());

                if (count is null)
                {
                    _log.Warning("Article not found");
                    return NotFound($"No article found for {articleId}");
                }

                var userLikeInfoForArticle = await _likeTrackingService.HasUserLiked(articleId.ToString(), xUserId.ToString());

                if (userLikeInfoForArticle is null)
                {
                    _log.Warning("User like info not found");
                    return NotFound($"No user information found for user: {xUserId} and article: {articleId}");
                }

                return Ok(new LikeInfo
                {
                    UserLikedArticle = userLikeInfoForArticle,
                    LikeCount = count.Value,
                });
            }
            catch (Exception ex)
            {
                _log.Error("Error occurred when trying to like article", ex);
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        /// <summary>
        /// Posts a new like for an article from a user
        /// </summary>
        /// <param name="articleId"></param>
        /// <param name="xUserId"></param>
        /// <response code="200">Success</response>
        /// <response code="400">The parameters you provided are invalid</response>
        /// <response code="404">The resource you were trying to reach is not found</response>
        [HttpPost]
        [Route("/articles/{article_id}/likes")]
        [ValidateModelState]
        [SwaggerOperation("LikeArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(LikeInfo), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "The parameters you provided are invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "The resource you were trying to reach is not found")]
        public virtual IActionResult LikeArticle([FromRoute(Name = "article_id")][Required] Guid articleId, [FromHeader][Required()] Guid xUserId)
        {

            try
            {
                _log.WithArticle(articleId.ToString()).WithUser(xUserId.ToString()).Information("Posting new like info");

                _articleLikingService.LikeArticle(articleId.ToString(), xUserId.ToString());

                return Ok();
            }
            catch (Exception ex)
            {
                _log.Error("Error occurred when trying to get article like information", ex);
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}
