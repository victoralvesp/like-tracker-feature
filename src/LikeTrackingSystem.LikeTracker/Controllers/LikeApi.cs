/*
 * Like API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using LikeTrackingSystem.LikeTracker.Attributes;
using LikeTrackingSystem.LikeTracker.Models;
using LikeTrackingSystem.Framework.Logging;
using LikeTrackingSystem.LikeTracker.Services;
using System.Threading.Tasks;

namespace LikeTrackingSystem.LikeTracker.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LikeApiController : ControllerBase
    { 

        
        private readonly ITrackService _tracker;
        private readonly ILogBook _log;

        /// <summary>
        /// Creates a new instance of the <see cref="LikeApiController"/> class.
        /// </summary>
        /// <param name="tracker"></param>
        /// <param name="log"></param>
        public LikeApiController(ITrackService tracker, ILogBook? log = null)
        {
            _tracker = tracker;
            _log = log ?? Log.Null;
        }



        /// <summary>
        /// Gets user like information for article
        /// </summary>
        /// <param name="articleId"></param>
        /// <param name="userId"></param>
        /// <response code="200">User and article found</response>
        /// <response code="400">The parameters you provided are invalid</response>
        /// <response code="404">The resource you were trying to reach is not found</response>
        [HttpGet]
        [Route("/users/{user_id}/articles/{article_id}/likes")]
        [ValidateModelState]
        [SwaggerOperation("UserLikedArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserLikedArticle), description: "User and article found")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "The parameters you provided are invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "The resource you were trying to reach is not found")]
        public virtual IActionResult UserLikedArticle([FromRoute(Name = "article_id")][Required] Guid articleId, [FromRoute(Name = "user_id")][Required] Guid userId)
        {

            try
            {
                _log.WithArticle(articleId.ToString()).WithUser(userId.ToString()).Information("Get likes info");
                var likeInfo = _tracker.GetLikeInfo(articleId.ToString(), userId.ToString());

                if (likeInfo is null)
                {
                    _log.Warning("Article not found");
                    return NotFound($"No article found for {articleId}");
                }

                return Ok(likeInfo);
            }
            catch (Exception ex)
            {
                _log.Error("Error occurred when trying to like article", ex);
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}
